<div class="section section-visible" data-id="RAAJuPq8" data-type="package" name="Activity Component" transient-focussed="true"><div class="paragraph body-paragraph" name="Documentation" data-id="8VmzkBNb"><div data-type="content" type="text/html" contenteditable="true" class="section-documentation"><h2>Description</h2>
<div>Your description...</div></div></div><div class="paragraph data-paragraph" name="Properties" data-id="2qnziYCb"><pre data-type="content" type="application/json" class="section-properties">{
  "version": "0.2.0",
  "icon": "show_chart",
  "description": "Your short description.",
  "tags": [
    "Your tags"
  ],
  "assets": [
    "moment.min.js",
    "lodash.min.js",
    "d3.min.js",
    "sessions.json"
  ],
  "changelog": {
    "0.2.0": "ADDED: interface for enabling components per chunk",
    "0.1.6": "checking how vue works in CS",
    "0.1.5": "ADDED: helper functions for transient container + DOM erase.",
    "0.1.0": "Initial version."
  },
  "github": {
    "url"   : "https://github.com/Stalkcomrade/codestrates-cell-versioning-package",
		"folder": "packages/RAAJuPq8-activityComponent"
  }
}</pre></div><div class="paragraph data-paragraph collapsed" data-id="HtJLJHYs" name="sessions"><pre data-type="content" type="application/json" id="sessions">[
    {
        "from": "2018-09-26T13:57:38.861Z",
        "to": "2018-09-26T14:29:01.537Z",
        "title": "0499d5ecbefa2d0134f2712b0afe6bec",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T14:00:15.476Z",
        "to": "2018-09-26T14:00:50.333Z",
        "title": "a9c9b90b278d40059eed0750b864ff26",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T14:03:53.095Z",
        "to": "2018-09-26T14:03:53.095Z",
        "title": "3b0e5d70fb370bd8c175d977fa6b1df6",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T14:05:12.296Z",
        "to": "2018-09-26T14:05:12.296Z",
        "title": "139beae46e6765ac1073efb5fdac17ee",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T14:29:13.030Z",
        "to": "2018-09-26T14:30:15.886Z",
        "title": "652c6647a9aa49537aa3a15f0550960c",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T14:30:32.262Z",
        "to": "2018-09-26T14:34:07.562Z",
        "title": "9fc0acaf1f233990342f079bc3d47d97",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T14:34:15.087Z",
        "to": "2018-09-26T14:34:57.253Z",
        "title": "e41a33f6285ef6e13d7fbed101f6d8fe",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T14:34:59.260Z",
        "to": "2018-09-26T14:37:12.711Z",
        "title": "a9d81ea39c423b800934f01d8676f8da",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T14:37:15.764Z",
        "to": "2018-09-26T14:37:55.923Z",
        "title": "70b2ebee79239c2b9c13a4e424a6db1b",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T14:38:01.164Z",
        "to": "2018-09-26T14:39:37.367Z",
        "title": "412b6c4af5d5dce8da17fe817ec7c095",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T14:39:44.348Z",
        "to": "2018-09-26T14:39:56.379Z",
        "title": "eba0c29ba11f15b8a9931cfd33f0e762",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T14:40:57.768Z",
        "to": "2018-09-26T14:41:00.557Z",
        "title": "a4062b3b8566d44b262300305577a113",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T14:41:34.273Z",
        "to": "2018-09-26T14:42:16.235Z",
        "title": "a9ab60daa40f042f92122224b92dfd2f",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T14:42:32.317Z",
        "to": "2018-09-26T14:43:14.733Z",
        "title": "78eca3a83901b0d853d7395882833631",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T14:43:18.554Z",
        "to": "2018-09-26T14:43:54.726Z",
        "title": "115d2bb075c85c9f8c0af9ab0b4cca65",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T14:44:20.935Z",
        "to": "2018-09-26T16:42:24.927Z",
        "title": "7d839076b65b8540fea6e28aee1942a9",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T16:42:27.171Z",
        "to": "2018-09-26T16:42:37.328Z",
        "title": "2190578833818c9ddd5f6653af81c2ee",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T16:42:48.004Z",
        "to": "2018-09-26T16:42:48.004Z",
        "title": "6b9898794c9b1376a21575455616f980",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T16:43:06.111Z",
        "to": "2018-09-26T16:43:33.632Z",
        "title": "0003b349c784759d01c6b91bf22eedf8",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T16:43:13.953Z",
        "to": "2018-09-26T17:54:32.040Z",
        "title": "17e16274d40cc908e2aa6063f39e8df4",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T17:53:03.108Z",
        "to": "2018-09-26T17:55:31.801Z",
        "title": "92a6c4e913e82776566dd2a8e3e10520",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T17:54:37.045Z",
        "to": "2018-09-26T18:20:38.605Z",
        "title": "74cd580c74625237e119adf82185714e",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T17:55:48.726Z",
        "to": "2018-09-26T17:56:11.232Z",
        "title": "c7a6ae574b75e902c089e043c4c56f97",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:07:37.668Z",
        "to": "2018-09-26T18:08:13.969Z",
        "title": "64b794bc4e3cf6b232ed615c751c621c",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:09:30.227Z",
        "to": "2018-09-26T18:09:42.454Z",
        "title": "d97f053203193a7335d6822dcaa1de4c",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:20:41.768Z",
        "to": "2018-09-26T18:21:27.593Z",
        "title": "da56ecc727dc59e9903b2eec283f6a47",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:21:35.842Z",
        "to": "2018-09-26T18:22:03.942Z",
        "title": "7160519e9180691dfaa561a595647252",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:22:05.410Z",
        "to": "2018-09-26T18:22:37.616Z",
        "title": "b954547b58b48868d5dae3a1adf5638c",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:22:40.986Z",
        "to": "2018-09-26T18:24:06.452Z",
        "title": "5a0970b10b8249189ee2071bf09a4971",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:24:10.978Z",
        "to": "2018-09-26T18:30:35.865Z",
        "title": "43d42a5e65354cc4bb0cc631082d9146",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:24:51.314Z",
        "to": "2018-09-26T18:25:26.976Z",
        "title": "46c9aad3e0d0f98656990d42e5dab38f",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:29:13.197Z",
        "to": "2018-09-26T18:29:13.197Z",
        "title": "223d71bedd71cfe12dd8c3f283705fa8",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:31:09.770Z",
        "to": "2018-09-26T18:31:09.770Z",
        "title": "04ab88f723c63b8e3fbdc2f22b3c4d94",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:32:10.975Z",
        "to": "2018-09-26T18:35:58.650Z",
        "title": "d1277b2f7a5e5ba11e77cacee7e84232",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:36:00.607Z",
        "to": "2018-09-26T18:38:03.405Z",
        "title": "55d9270758e2617351c47f1eceb68751",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:38:08.654Z",
        "to": "2018-09-26T18:38:08.654Z",
        "title": "b1138f30a9f709fea41bef1702f55d78",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:38:15.208Z",
        "to": "2018-09-26T18:39:43.912Z",
        "title": "cbca2b939fee0f1c350ea44c732959f2",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:39:50.015Z",
        "to": "2018-09-26T18:40:31.817Z",
        "title": "7b1523df2d60a12a06ee0df401d5d688",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:40:35.058Z",
        "to": "2018-09-26T18:40:45.697Z",
        "title": "8a59b2ffc2475df0a7ab5d2933a4a7ca",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:40:47.929Z",
        "to": "2018-09-26T18:43:53.569Z",
        "title": "631c558f83aa5e6a38848b01238e48b4",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:43:55.010Z",
        "to": "2018-09-26T18:49:49.750Z",
        "title": "c4e719a085c6263611cecde09411358e",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:49:54.990Z",
        "to": "2018-09-26T18:51:46.861Z",
        "title": "4a51a060b47f18785a3f87f9f2b9861b",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:51:49.326Z",
        "to": "2018-09-26T18:51:58.885Z",
        "title": "d683de2e44f95308085d171e917689a2",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:52:00.714Z",
        "to": "2018-09-26T18:52:16.277Z",
        "title": "58943dd3e26be20a8983f6ef8c0b7ff0",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:52:18.471Z",
        "to": "2018-09-26T18:52:18.471Z",
        "title": "c232ba16d6f1481b25d05928824f8617",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:52:34.799Z",
        "to": "2018-09-26T18:52:55.240Z",
        "title": "91cca04471879f2ef2850c8e66c6986f",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:53:01.200Z",
        "to": "2018-09-26T18:53:01.200Z",
        "title": "6527bc3a31913c858545644e03b94fb2",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:53:21.227Z",
        "to": "2018-09-26T19:08:55.091Z",
        "title": "64cc3e4cd1eb86ae94d88f0f76007c33",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:54:08.222Z",
        "to": "2018-09-26T18:54:08.222Z",
        "title": "56d061329a2273ea602c6c2f069a3f60",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:54:24.190Z",
        "to": "2018-09-26T18:54:24.190Z",
        "title": "7a56f84fc296da4411fe742cb7c0b850",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:55:26.603Z",
        "to": "2018-09-26T18:55:26.603Z",
        "title": "66f08e08348bc276b907f8f4d54146f3",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T18:55:36.933Z",
        "to": "2018-09-26T18:55:36.933Z",
        "title": "f2845f4aba2e07ab83a1f9ad22dac1b9",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T19:00:19.425Z",
        "to": "2018-09-26T19:00:19.425Z",
        "title": "b4bab43b1ca43ef440b187e36b2c7f8a",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T19:00:47.040Z",
        "to": "2018-09-26T19:00:47.040Z",
        "title": "564cbfd7dcac726a926e6f1709c62280",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T19:01:46.189Z",
        "to": "2018-09-26T19:01:46.189Z",
        "title": "86679e488726360b04bb535b79e9edb9",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T19:03:04.676Z",
        "to": "2018-09-26T19:03:04.676Z",
        "title": "9f67d345ec79bcaebb21b47b65b4396b",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T19:04:34.048Z",
        "to": "2018-09-26T19:04:34.048Z",
        "title": "a0b8c6472ab4bbe16477ca2227027ec3",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T19:05:52.910Z",
        "to": "2018-09-26T19:05:52.910Z",
        "title": "8ac16843745b242b2707a36fd7e00061",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T19:06:08.235Z",
        "to": "2018-09-26T19:06:08.235Z",
        "title": "7a35db3dc62223ef07b6f0dd719b1a34",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T19:06:19.143Z",
        "to": "2018-09-26T19:06:19.143Z",
        "title": "e309955335038b55b2b659cf4ce3daac",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T19:06:48.363Z",
        "to": "2018-09-26T19:06:48.363Z",
        "title": "4b7f891d5f3ac92f0defc01498e8833c",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T19:07:36.662Z",
        "to": "2018-09-26T19:07:36.662Z",
        "title": "ec2ff47a635ff10bc4f393b93f5b1425",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T19:07:57.230Z",
        "to": "2018-09-26T19:07:57.230Z",
        "title": "ac079da990d5cda07031e58ffa4dc96e",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T19:08:46.709Z",
        "to": "2018-09-26T19:08:46.709Z",
        "title": "2ae47080e87aa6a7825aea755ffe102c",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-26T19:08:57.588Z",
        "to": "2018-09-26T19:08:57.588Z",
        "title": "fa13b878852d112565f20de3db226198",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:00:56.023Z",
        "to": "2018-09-27T07:19:15.198Z",
        "title": "00cbe823d40ef48ef21eefe66ee585e1",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:01:21.317Z",
        "to": "2018-09-27T07:01:21.317Z",
        "title": "6c572c0dad6ea6ebfa6672a738711b46",
        "label": [
            "maski89:github"
        ],
        "group": [
            "maski89:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:18:20.946Z",
        "to": "2018-09-27T07:18:20.946Z",
        "title": "2b72dd5a3053061245bd6cf858242292",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:18:30.145Z",
        "to": "2018-09-27T07:18:30.145Z",
        "title": "186c172eacfa5a012b3909b80e75223e",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:19:17.958Z",
        "to": "2018-09-27T07:19:17.958Z",
        "title": "8375f940842f4d9aa981bb923ace9e45",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:19:49.754Z",
        "to": "2018-09-27T07:20:02.648Z",
        "title": "6edba7db48bf37139c20e8e1d92ee608",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:20:41.665Z",
        "to": "2018-09-27T07:20:41.665Z",
        "title": "84936a58eae503ee171b36cdeef2c6f6",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:21:27.813Z",
        "to": "2018-09-27T07:24:51.312Z",
        "title": "442cc8f57e6fec068b8425c911672ca0",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:23:28.170Z",
        "to": "2018-09-27T07:23:28.170Z",
        "title": "219cdeabe55b2912cd55f499aa51b742",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:25:05.464Z",
        "to": "2018-09-27T07:25:05.464Z",
        "title": "63768f9a08c09402dd68dbab71cd6cf0",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:25:10.767Z",
        "to": "2018-09-27T07:25:10.767Z",
        "title": "0b0fa51db8e946f47f3d676f11fed198",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:25:22.202Z",
        "to": "2018-09-27T07:25:22.202Z",
        "title": "6efba81cafd8d4275d07ea7a83ece597",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:25:51.579Z",
        "to": "2018-09-27T07:25:51.579Z",
        "title": "4ce04d0322c1f1e2e813f36ea5b324d8",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:26:53.784Z",
        "to": "2018-09-27T08:00:10.731Z",
        "title": "9887c05e7cca61d3a45187b745414c55",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:39:53.504Z",
        "to": "2018-09-27T07:39:54.668Z",
        "title": "295e4eaf92099aeb7fda78e9f95c3b09",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:40:17.429Z",
        "to": "2018-09-27T07:40:19.284Z",
        "title": "12edcc6e8d62b711b8723e548ff22503",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:41:19.500Z",
        "to": "2018-09-27T07:41:19.500Z",
        "title": "d68a846099296a50f64285946aede727",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:42:29.896Z",
        "to": "2018-09-27T07:42:29.896Z",
        "title": "d01934a857f018fa08b83a6648821a26",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:43:54.829Z",
        "to": "2018-09-27T07:43:54.829Z",
        "title": "151543604a37b8588a8aab6bf3fd70ed",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:44:36.659Z",
        "to": "2018-09-27T07:44:36.659Z",
        "title": "237d88c2f5f12b2f704d488563a48a11",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:46:10.653Z",
        "to": "2018-09-27T07:46:10.653Z",
        "title": "25e1b709c2cfe6d87bef40f00f7db243",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:46:45.103Z",
        "to": "2018-09-27T07:46:45.103Z",
        "title": "76a6f2a4e6a6c5a9dbdc532505bc9334",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:48:26.521Z",
        "to": "2018-09-27T07:48:26.521Z",
        "title": "bbe0edc6875cbd2658343fbf598a9c12",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:49:17.531Z",
        "to": "2018-09-27T07:49:17.531Z",
        "title": "0cc4da6d80e2b0dc446d5bd035a22250",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:50:32.904Z",
        "to": "2018-09-27T07:50:32.904Z",
        "title": "ff8b70dbe3e8f31c8dd656a185600e93",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:52:52.279Z",
        "to": "2018-09-27T07:53:54.215Z",
        "title": "8d4ac23cc7f82cf2d8f5e5f1af7245b0",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T07:55:25.643Z",
        "to": "2018-09-27T07:55:25.643Z",
        "title": "17809417182d21796b342241121028c9",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T08:00:13.280Z",
        "to": "2018-09-27T08:00:13.280Z",
        "title": "c973673faa8b0f1c6006f4a772f3cdf0",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T08:22:18.186Z",
        "to": "2018-09-27T08:24:01.754Z",
        "title": "a39ed12547668dadafb2bcd06eef85e7",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T08:28:06.225Z",
        "to": "2018-09-27T08:28:06.225Z",
        "title": "b3b6c61e09a6e72ceb1106fb7706e359",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T08:30:15.763Z",
        "to": "2018-09-27T08:30:49.449Z",
        "title": "c73bcfba1ceef00f216576f45b7700a6",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T08:31:05.995Z",
        "to": "2018-09-27T08:31:36.655Z",
        "title": "4710573139edf681c8d57306c2afec15",
        "label": [
            "jbk:au"
        ],
        "group": [
            "jbk:au"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T08:31:40.711Z",
        "to": "2018-09-27T08:31:40.711Z",
        "title": "908891316c19d8a329d8b4033e1605ad",
        "label": [
            "jbk:au"
        ],
        "group": [
            "jbk:au"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T08:31:53.256Z",
        "to": "2018-09-27T08:31:53.256Z",
        "title": "b656fffc9b3ac7f5c54ab38116f1e884",
        "label": [
            "jbk:au"
        ],
        "group": [
            "jbk:au"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T08:32:56.535Z",
        "to": "2018-09-27T08:34:00.614Z",
        "title": "e1b8818b5060249abade7a7581a87396",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T08:34:19.300Z",
        "to": "2018-09-27T08:34:19.300Z",
        "title": "28eb6ec87f52a84e6d028726cc657de9",
        "label": [
            "jbk:au"
        ],
        "group": [
            "jbk:au"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T08:34:59.321Z",
        "to": "2018-09-27T08:34:59.321Z",
        "title": "a32e84ddf5f9033071c744fb414c89e5",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T08:47:31.888Z",
        "to": "2018-09-27T08:47:31.888Z",
        "title": "69d46198263aef1e2434b8db8626cc9c",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T08:52:38.454Z",
        "to": "2018-09-27T08:52:38.454Z",
        "title": "b7e6fc5c0e49164db8f0987bb4725427",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T08:53:12.980Z",
        "to": "2018-09-27T08:53:43.265Z",
        "title": "dca19487939501c0a0564d7337528316",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T08:54:52.431Z",
        "to": "2018-09-27T08:54:52.431Z",
        "title": "6e72541c42e6c6c486c2ccb2547fe149",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T08:56:32.364Z",
        "to": "2018-09-27T08:56:32.364Z",
        "title": "a0fe381f27e0da35e93370be3c13048d",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T09:01:15.069Z",
        "to": "2018-09-27T09:01:15.069Z",
        "title": "e74bc2883fc7ad26f5c7ab37acd6bdd8",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T09:01:23.037Z",
        "to": "2018-09-27T09:07:18.162Z",
        "title": "6b00d2840c0050317f6f2394d9887f3c",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T09:06:23.734Z",
        "to": "2018-09-27T09:06:23.734Z",
        "title": "7856a33c375ec12128ee74152c1da854",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T09:07:31.678Z",
        "to": "2018-09-27T09:11:05.155Z",
        "title": "b136b17812f0aee94c4dc11e7078b583",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T09:08:35.116Z",
        "to": "2018-09-27T09:08:35.116Z",
        "title": "1db818615e717a841573c6fc1f3e0d27",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T09:11:12.554Z",
        "to": "2018-09-27T09:11:12.554Z",
        "title": "d51f54fd3ee1cea5497b811aa2b40ed4",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T10:26:08.585Z",
        "to": "2018-09-27T10:26:08.585Z",
        "title": "52dcabac275709db095e1e41c5809f97",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T10:27:30.868Z",
        "to": "2018-09-27T10:27:57.311Z",
        "title": "c2fc4decf278c104800fc55602a7675e",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T10:28:11.726Z",
        "to": "2018-09-27T10:30:10.733Z",
        "title": "5783d181c23ef946665dbeec8eeb6936",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T10:29:51.886Z",
        "to": "2018-09-27T10:29:51.886Z",
        "title": "eeccd7c651ceb25e476f776dbc1eea3d",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T11:03:52.440Z",
        "to": "2018-09-27T11:42:15.885Z",
        "title": "e2585c0ccab6d49e13447d41c59a415e",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T11:38:23.975Z",
        "to": "2018-09-27T11:38:23.975Z",
        "title": "4bca65922c1645acb792841d8cc1bd3d",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T11:38:42.989Z",
        "to": "2018-09-27T11:39:20.847Z",
        "title": "f34bef5531cbfa3547c9bc2d80fc6233",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T11:39:42.183Z",
        "to": "2018-09-27T11:39:42.183Z",
        "title": "e3abe7f79688ef8bb70c22cc1e810925",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T11:39:57.342Z",
        "to": "2018-09-27T11:39:57.342Z",
        "title": "c3487e93e85cbc56d19fa528a3e7ea01",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T11:42:36.858Z",
        "to": "2018-09-27T11:42:36.858Z",
        "title": "6beacba00b13acce8daa32ff623bf5d0",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T11:44:45.134Z",
        "to": "2018-09-27T11:44:45.134Z",
        "title": "2b0af4728a9b53b1f3f95957361229f5",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T11:44:47.969Z",
        "to": "2018-09-27T11:44:47.969Z",
        "title": "24f9e1d96205e4fee3fb3255d6881320",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T11:56:48.382Z",
        "to": "2018-09-27T11:56:48.382Z",
        "title": "03bf87425937572972718d426638c859",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T14:00:16.586Z",
        "to": "2018-09-27T14:00:16.586Z",
        "title": "ed51e67a8dbd2d183b280e95c9391e22",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T14:00:35.103Z",
        "to": "2018-09-27T14:00:35.103Z",
        "title": "53f78be3a97fa05bf9a27df1c81e0d6a",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T14:00:56.838Z",
        "to": "2018-09-27T14:01:20.933Z",
        "title": "16c8ceac8d0a3645a577264c4a76a21b",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-27T14:02:00.668Z",
        "to": "2018-09-27T14:02:00.668Z",
        "title": "ebff66b79332c023e94aae8d3ea9cd7a",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-28T07:47:41.780Z",
        "to": "2018-09-28T07:51:52.925Z",
        "title": "4ef9b3b49d6754b4fec13b2b4985cc43",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-28T07:48:15.655Z",
        "to": "2018-09-28T07:48:53.247Z",
        "title": "11995c460e6e2dbe6e53e98cab4212a3",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-28T07:51:20.678Z",
        "to": "2018-09-28T07:51:20.678Z",
        "title": "bd1b1b8a217eb5dd540c38614aa9720e",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-28T07:54:10.511Z",
        "to": "2018-09-28T07:54:10.511Z",
        "title": "f38d4de9234e5bbfd5ed991c30875b54",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-28T08:13:49.267Z",
        "to": "2018-09-28T08:13:49.267Z",
        "title": "2d831a10c8dcb111bf83e2bd46adeb0a",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-28T08:19:41.934Z",
        "to": "2018-09-28T08:19:41.934Z",
        "title": "cd636a4ea5cff869470dfb21db4b16b6",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-28T08:19:48.162Z",
        "to": "2018-09-28T08:19:48.162Z",
        "title": "270cfb9e5d0f095ce90d50d1bb0f6f00",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-28T08:19:53.183Z",
        "to": "2018-09-28T08:20:12.328Z",
        "title": "74e76edaf58313d2a142123bf30adf92",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-28T08:21:11.233Z",
        "to": "2018-09-28T08:21:11.233Z",
        "title": "8cbc37c2f8c02b4e961f037128bd4921",
        "label": [
            "anonymous:"
        ],
        "group": [
            "anonymous:"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-09-28T08:21:32.048Z",
        "to": "2018-09-28T08:23:36.327Z",
        "title": "8dece07d37a66ba7bdc41780ad152663",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-01T10:56:52.712Z",
        "to": "2018-10-01T10:57:43.038Z",
        "title": "655b9a1bf22b458c3f4861d1cb110d3f",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-01T10:57:19.632Z",
        "to": "2018-10-01T11:06:15.809Z",
        "title": "ef4198054be314260ba08a6931b35b21",
        "label": [
            "raedle:github"
        ],
        "group": [
            "raedle:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-01T11:02:51.588Z",
        "to": "2018-10-01T11:02:51.588Z",
        "title": "df10da73f9fb16dfe4b846e02ed3bcd5",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-01T11:06:22.291Z",
        "to": "2018-10-01T11:06:22.291Z",
        "title": "e9bdfbe68f2e4b2466870c5bfde9afbb",
        "label": [
            "raedle:github"
        ],
        "group": [
            "raedle:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-01T11:13:41.359Z",
        "to": "2018-10-01T11:13:41.359Z",
        "title": "b8a1800593b08d6648e47361f51c795c",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-01T11:13:49.149Z",
        "to": "2018-10-01T11:13:49.149Z",
        "title": "56727aa7bf9062aab4e128c7f93b323c",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-01T11:14:08.425Z",
        "to": "2018-10-01T11:14:20.835Z",
        "title": "7c2961c16e6bdfec34173d0337ac1db5",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-01T11:14:48.670Z",
        "to": "2018-10-01T11:14:54.934Z",
        "title": "e5d1e44ae25c0520581cb6f099ce3345",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-02T12:37:33.815Z",
        "to": "2018-10-02T12:37:33.815Z",
        "title": "7eb8c8417deef4f3c824148691204d76",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-02T12:38:02.536Z",
        "to": "2018-10-02T12:38:36.691Z",
        "title": "a9b5b24c77577d2669cba10cd3acd63e",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-04T12:26:35.480Z",
        "to": "2018-10-04T12:26:35.480Z",
        "title": "32163e31a02044a1cfa58f388277e377",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-04T12:26:47.647Z",
        "to": "2018-10-04T12:26:47.647Z",
        "title": "9b831e8f7231ab28032804dac23526f4",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-04T12:26:51.162Z",
        "to": "2018-10-04T12:26:51.162Z",
        "title": "546b15a118a7a6485823579e33d80500",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-04T12:27:13.630Z",
        "to": "2018-10-04T12:28:44.997Z",
        "title": "1933e39b7be7f5c533e2b0d1d2c2ef45",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-05T09:11:31.302Z",
        "to": "2018-10-05T09:11:31.302Z",
        "title": "548ca739d7dc6e7c64b5a00822bbac82",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-11T10:34:45.367Z",
        "to": "2018-10-11T10:34:45.367Z",
        "title": "e741cc16818a90554d1c168a46186475",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-11T10:34:59.619Z",
        "to": "2018-10-11T10:34:59.619Z",
        "title": "28c5357a1509fe10cfb1c918189d0f79",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-11T10:35:05.247Z",
        "to": "2018-10-11T10:35:05.247Z",
        "title": "d947e0e18354527ec1c711b4c4170dc8",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-11T10:35:29.356Z",
        "to": "2018-10-11T10:35:29.356Z",
        "title": "96f7c78b77dcef1c7c04cf4c2c669ed5",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-11T12:04:53.701Z",
        "to": "2018-10-11T12:05:25.537Z",
        "title": "ef65c761a95befe83ae6f449b8d452e2",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-11T12:05:58.476Z",
        "to": "2018-10-11T12:06:11.676Z",
        "title": "48064189c77ae6c90262414046907250",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-11T12:06:23.735Z",
        "to": "2018-10-11T12:06:23.735Z",
        "title": "33d37ba155e26e9f89c9a86a6eeb9cd3",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-12T09:10:26.420Z",
        "to": "2018-10-12T09:10:26.420Z",
        "title": "a9eec697663bbb9831752ccdcdd09134",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-12T09:10:32.709Z",
        "to": "2018-10-12T09:10:32.709Z",
        "title": "cf93f85f34f78b5e4a0c49bbdded81c4",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-12T09:10:52.658Z",
        "to": "2018-10-12T09:11:43.315Z",
        "title": "d6375aeef491dac7801c8b3696a4eaac",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2018-10-12T09:12:54.679Z",
        "to": "2018-10-12T09:12:54.679Z",
        "title": "e1fb834c9cea34eb9204b3362895d711",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    },
    {
        "from": "2019-02-07T07:34:32.570Z",
        "to": "2019-02-07T07:34:32.570Z",
        "title": "5abc0fa25f3a295206447c6c75d92cdb",
        "label": [
            "cklokmose:github"
        ],
        "group": [
            "cklokmose:github"
        ],
        "className": "entry--point--default"
    }
]</pre></div><div class="paragraph code-paragraph" data-id="xKuYMmzZ" last-execution-state="success" run-on-load="true" name="TODO-delete"><pre data-type="content" type="text/javascript" id="TODO-delete">const vm = Codestrate.VirtualMachines.get("text/javascript");
const ks = require("#sessions")
vm.addToGlobalContext({
  ks
})</pre></div><div class="paragraph code-paragraph collapsed" data-id="n9vRiEuq" last-execution-state="success" run-on-load="true" name="helpers-underscore-moment"><pre data-type="content" type="text/javascript" id="helpers-underscore-moment">const vm = Codestrate.VirtualMachines.get("text/javascript");


importLib([
  "moment.min.js",
   "lodash.min.js",
   "d3.min.js"
]).then(() =&gt; {
  


const uuid = function b(a){return a?(a^Math.random()*16&gt;&gt;a/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,b)}

const cloneDeep = _.cloneDeep
const isNull = _.isNull
const isDate = _.isDate
const isString = _.isString
const isFunction = _.isFunction

const isArray = Array.isArray
const isSimpleExtent = arr =&gt; isArray(arr) &amp;&amp; arr.length === 2
const isExtent = arr =&gt; isArray(arr) &amp;&amp; isArray(arr[0]) &amp;&amp; arr[0].length === 2 &amp;&amp; isArray(arr[1]) &amp;&amp; arr[1].length === 2
const map = Array.prototype.map;
const slice = Array.prototype.slice


vm.addToGlobalContext({
  uuid,
  cloneDeep,
  isNull,
  isDate,
  isString,
  isFunction,
  isArray,
  isSimpleExtent,
  isExtent,
  map,
  slice
});

  
  
})</pre></div><div class="paragraph code-paragraph collapsed" data-id="4XsLZMub" last-execution-state="success" run-on-load="true" name="entries-classes"><pre data-type="content" type="text/javascript" id="entries-classes">const vm = Codestrate.VirtualMachines.get("text/javascript");


class Point {
  constructor(group, at, title, symbol, className, link, webstrateId) {
    this.group = group;
    this.at = at;
    this.title = title;
    this.symbol = symbol;
    this.className = className;
    this.link = link;
    this.webstrateId = webstrateId;
    }
}


/**
 *
 * time entry that represent a period
 *
 * @param {string} group
 * @param {Date} from
 * @param {Date} to
 * @param {string} label
 * @param {string} title
 * @param {string} className
 * @constructor
 */
class Interval {
    constructor (group, from, to, label, title, className) {
        this.group = group;
        this.from = from;
        this.to = to;
        this.label = label;
        this.title = title;
        this.className = className;
    }
}

/**
 * check if two entries collide
 *
 * @param e1
 * @param e2
 */
const isCollided = (e1, e2) =&gt; {
    if (e1 === e2) {
        return false;
    }

    if (e1 instanceof Point &amp;&amp; e2 instanceof Interval) {
        return e1.at.valueOf() &gt;= e2.from.valueOf() &amp;&amp; e1.at.valueOf() &lt;= e2.to.valueOf();
    }

    else if (e1 instanceof Interval &amp;&amp; e2 instanceof Point) {
        return e2.at.valueOf() &gt;= e1.from.valueOf() &amp;&amp; e2.at.valueOf() &lt;= e1.to.valueOf();
    }

    else if (e1 instanceof Point &amp;&amp; e2 instanceof Point) {
        return e1.at.valueOf() === e2.at.valueOf();
    }

    else if (e1 instanceof Interval &amp;&amp; e2 instanceof Interval) {
        return (e2.from.valueOf() &lt;= e1.to.valueOf() &amp;&amp; e2.to.valueOf() &gt;= e1.to.valueOf())
            || (e1.from.valueOf() &lt;= e2.to.valueOf() &amp;&amp; e1.to.valueOf() &gt;= e2.to.valueOf());
    }
};

/**
 *
 * asc sort order
 *
 * @param a
 * @param b
 * @returns {number}
 */
const ascending = (a, b) =&gt; a &lt; b ? -1 : a &gt; b ? 1 : a &gt;= b ? 0 : NaN;

/**
 *
 * @param data
 * @returns {*}
 */
const sort = (data) =&gt; {
    return data.sort((a, b) =&gt; {
        if (a instanceof Point &amp;&amp; b instanceof Interval) {
            return ascending(a.at, b.from);
        }

        else if (a instanceof Interval &amp;&amp; b instanceof Point) {
            return ascending(a.from, b.at);
        }

        else if (a instanceof Interval &amp;&amp; b instanceof Interval) {
            return ascending(a.from, b.from);
        }

        else if (a instanceof Point &amp;&amp; b instanceof Point) {
            return ascending(a.at, b.at);
        }
    });
};


const chunk = (data) =&gt; {
    const results = [
        []
    ];

    sort(data);

    for (let i = 0, l = data.length; i &lt; l; i += 1) {
        const entry = data[i];

        for (let j = 0, L = results.length; j &lt; L; j += 1) {
            if (results[j].length === 0) {
                results[j].push(entry);
                break;
            }

            const lastItem = results[j][results[j].length - 1];

            if (!isCollided(lastItem, entry)) {
                results[j].push(entry);
                break;
            }

            else {
                if (j === results.length - 1) {
                    results.push([entry]);
                } else {
                    continue;
                }
            }
        }
    }

    return results;
};

/**
 *
 * get every group's data
 *
 * @param data
 */
const groupBy = (data) =&gt; {
    const results = {};
    let dateTimeStart, dateTimeEnd;

    for (let i = 0, l = data.length; i &lt; l; i += 1) {
        var entry = data[i],
              { group, from, to, label, at, title, className, symbol, link, webstrateId } = entry;
      
       from = new Date(from)
      to = new Date(to)

        if (isDate(from) &amp;&amp; isDate(to) &amp;&amp; from &lt; to &amp;&amp; (isString(group) || isFunction(group.toString))) {
            dateTimeStart = !dateTimeStart
                ? from
                : (dateTimeStart &gt; from ? from : dateTimeStart);

            dateTimeEnd = !dateTimeEnd
                ? to
                : (dateTimeEnd &lt; to ? to : dateTimeEnd);

            if (results[group]) {
                results[group].push(new Interval(group, from, to, label, title, className));
            }

            else {
                results[group] = [new Interval(group, from, to, label, title, className)];
            }
        }

      // Point definition 
      
        else if (isDate(at) &amp;&amp; (isString(group) || isFunction(group.toString))) {
            dateTimeStart = !dateTimeStart
                ? at
                : (dateTimeStart &gt; at ? at : dateTimeStart);

            dateTimeEnd = !dateTimeEnd
                ? at
                : (dateTimeEnd &lt; at ? at : dateTimeEnd);

            if (results[group]) {
              results[group].push(new Point(group, at, title, symbol, className, link, webstrateId));
            }

            else {
              results[group] = [new Point(group, at, title, symbol, className, link, webstrateId)];
            }
        }
    }

    return {
        dateTimeStart,
        dateTimeEnd,
        results
    };
};

const getTimelineGroups = (data) =&gt; {
    const {results, dateTimeStart, dateTimeEnd} = groupBy(data),
        groups = Object.keys(results);

    if (!groups.length) {
        return {
            dateTimeStart: moment().startOf('year'),
            dateTimeEnd: moment(),
            data: {},
            groups,
        }
    }

    if (dateTimeStart.valueOf() === dateTimeEnd.valueOf()) {
        return groups.reduce((ite, cur) =&gt; {
            ite.data[cur] = chunk(results[cur]);
            return ite;
        }, {
            dateTimeStart: moment(dateTimeStart).subtract(6, 'months'),
            dateTimeEnd: moment(dateTimeEnd).add(6, 'months'),
            data: {},
            groups
        });
    }

    return groups.reduce((ite, cur) =&gt; {
        ite.data[cur] = chunk(results[cur]);
        return ite;
    }, {
        dateTimeStart,
        dateTimeEnd,
        data: {},
        groups
    });
};

const options = { 
                        intervalCornerRadius: 4,
                        symbolSize: 400,
                        groupLabelFontSize: 12,
                        groupLabelFontWeight: 400,
                        groupLabelFontOpacity: 1,
                        groupLaneWidth: 200,
                        tickSize: 10,
                        tickPadding: 8,
                        axisXLaneHeight: 40,
                        axisFontSize: 12,
                        axisFontWeight: 600,
                        axisFontOpacity: 0.5,
                        axisXLabel: null,
                        axisLabelFontSize: 14,
                        axisLabelFontWeight: 600,
                        axisLabelFontOpacity: 1,
                        backgroundColor: 'rgba(255, 255, 255, 0.125)',
                        borderRadius: 0,
                        borderWidth: 2,
                        borderColor: 'rgba(0, 0, 0, .125)',
                        boundingLineWidth: 2,
                        boundingLineColor: 'rgba(0, 0, 0, .125)',
                        currentTimeLineWidth: 4,
                        currentTimeLineColor: 'rgba(255, 56, 96, 1)',
                        liveTimer: true,
                        liveTimerTick: 250,
                        scaleExtent: [0.05, Infinity]
                       
         }
          
/**
 *
 * select the correct paddingInner and paddingOuter for axis x
 *
 * @param {number} height
 * @return {[number, number]}
 */
const selectPaddingInnerOuterY = (height) =&gt; {
    let paddingInner = 0.2, paddingOuter = 0.1;

    if (height &gt; 560) paddingInner = 0.15;
    if (height &gt; 970) paddingInner = 0.1;

    return [paddingInner, paddingOuter];
};

/**
 * https://github.com/Stalkcomrade/Vs/blob/master/src/plugins/roundedRect.js
 * generate svg path's d to simulate rounded rect
 *
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @param {number} r
 * @param {boolean} tl
 * @param {boolean} tr
 * @param {boolean} bl
 * @param {boolean} br
 * @returns {string}
 */
const roundedRect = function (x, y, w, h, r, tl, tr, bl, br) {
    let retval;
    retval = 'M' + (x + r) + ',' + y;
    retval += 'h' + (w - 2 * r);
    if (tr) {
        retval += 'a' + r + ',' + r + ' 0 0 1 ' + r + ',' + r;
    } else {
        retval += 'h' + r;
        retval += 'v' + r;
    }
    retval += 'v' + (h - 2 * r);
    if (br) {
        retval += 'a' + r + ',' + r + ' 0 0 1 ' + -r + ',' + r;
    } else {
        retval += 'v' + r;
        retval += 'h' + -r;
    }
    retval += 'h' + (2 * r - w);
    if (bl) {
        retval += 'a' + r + ',' + r + ' 0 0 1 ' + -r + ',' + -r;
    } else {
        retval += 'h' + -r;
        retval += 'v' + -r;
    }
    retval += 'v' + (2 * r - h);
    if (tl) {
        retval += 'a' + r + ',' + r + ' 0 0 1 ' + r + ',' + -r;
    } else {
        retval += 'v' + -r;
        retval += 'h' + r;
    }
    retval += 'z';
    return retval;
}


vm.addToGlobalContext({
  Point,
  Interval,
  isCollided,
  ascending,
  sort,
  chunk,
  groupBy,
  getTimelineGroups,
  options,
  selectPaddingInnerOuterY,
  roundedRect
});

</pre></div><div class="paragraph code-paragraph collapsed" data-id="rCS8sqHQ" run-on-load="true" last-execution-state="success" name="draw-entries-reference"><pre data-type="content" type="text/javascript" id="draw-entries-reference">const vm = Codestrate.VirtualMachines.get("text/javascript");


importLib([
  "moment.min.js",
  "lodash.min.js",
  "d3.min.js"
]).then(() =&gt; {
 


/**
 *
 * @param g
 * @param data
 * @param groups
 * @param xScale
 * @param yScale
 * @param symbolSize
 * @param intervalCornerRadius
 */
const drawEntriesMultiLaneX = (g, data, groups, xScale, yScale, symbolSize, intervalCornerRadius, roundedRect) =&gt; {
    const entriesSelection = g.selectAll('.entry');
    if (!entriesSelection.empty()) entriesSelection.remove();

    for (let i = 0, l = groups.length; i &lt; l; i += 1) {
        const groupData = data[groups[i]];
        const scaleAxisY = yScale(i).domain(Object.keys(groupData));

        for (let j = 0; j &lt; groupData.length; j += 1) {
            const Y = scaleAxisY(j.toString()),
                H = scaleAxisY.bandwidth(),
                entries = groupData[j];

            for (let k = 0; k &lt; entries.length; k += 1) {
                const entry = entries[k];

              // Point def
              
                if (entry instanceof Point) {
                    const symbolGen = d3.symbol().size(symbolSize);

                    const symbol = g.append('path')
                          .attr('transform', `translate(${xScale(entry.at)}, ${Y + H / 2})`)
                          .attr('class', `entry ${entry.className ? entry.className : 'entry--point--default'}`)
                          .attr('d', symbolGen.type(d3[entry.symbol] || d3['symbolCircle'])())
                          .attr('href', entry.link); 

                  // symbol
                    // .on('mouseover', () =&gt; showTip(entry.title))
                  // .on('mouseover', showTip(entry.title))
                    // .on('mouseout', hideTip)
                    // .on('click', function()  { return window.open('https://webstrates.cs.au.dk/' + entry.webstrateId + '/' + entry.link + '/?copy=tmpCopyOf_' + entry.webstrateId, '_blank') });
                  // https://webstrates.cs.au.dk/dashboard-full/#/calendar
                    // .on('click', function()  { return webstrate.restore(entry.link) });
                  // .on('click', function() {return window.location = entry.link})
                  
                }

                else if (entry instanceof Interval) {
                    const X = xScale(entry.from),
                        W = xScale(entry.to) - X;

                    // var inspect = []
                    // inspect.push(X, Y, W, H, intervalCornerRadius, true, true, true, true)
                    
                  
                    try {

                        const interval = g.append('path')
                              .attr('class', `entry ${entry.className ? entry.className : 'entry--interval--default'}`)
                        .attr('d', () =&gt; roundedRect(X, Y, W, H, intervalCornerRadius, true, true, true, true))
                              // .attr('d', function() {roundedRect(X, Y, W, H, intervalCornerRadius, true, true, true, true)})

                         if (entry.title) {
                        // interval
                            // .on('mouseover', showTip(entry.title))
                            // .on('mouseout', hideTip);
                    }
                        
                    } catch (err) {

                        console.error("Test:", err)
                        
                    } finally {
                        
                    }
                    

                   

                    const text = g.append('text')
                        .attr('class', 'entry entry--label')
                        .attr('text-anchor', 'middle')
                        .attr('pointer-events', 'none')
                        .attr('x', (X + W / 2))
                        .attr('y', (Y + H / 2))
                        .text(entry.label)
                        .attr('fill', '#fff')
                        .attr('dy', '0.32em');

                    if (text.node().getComputedTextLength() &gt; W) {
                        text.remove();
                    }
                }
            }
        }
    }
};

/**
 * https://github.com/Stalkcomrade/Vs/blob/master/src/plugins/drawCurrentReference.js
 * @param g
 * @param xScale
 * @param g_h
 * @param currentTimeLineColor
 * @param currentTimeLineWidth
 */
const drawCurrentReferenceX = (g, xScale, g_h, currentTimeLineColor, currentTimeLineWidth) =&gt; {
    const date = new Date(),
        referenceSelection = g.select('.line--reference');

    if (!referenceSelection.empty()) {
        referenceSelection
            .attr('x1', xScale(date))
            .attr('x2', xScale(date));
    } else {
        g.append('line')
            .attr('class', 'line--reference')
            .attr('x1', xScale(date))
            .attr('x2', xScale(date))
            .attr('y2', g_h)
            .attr('stroke', currentTimeLineColor)
            .attr('stroke-width', currentTimeLineWidth)
            .attr('pointer-events', 'none');
    }
    // if (!referenceSelection.empty()) referenceSelection.remove();
    //
    // g.append('line')
    //     .attr('class', 'line--reference')
    //     .attr('x1', xScale(date))
    //     .attr('x2', xScale(date))
    //     .attr('y1', 0)
    //     .attr('y2', g_h)
    //     .attr('stroke', currentTimeLineColor)
    //     .attr('stroke-width', currentTimeLineWidth)
    //     .attr('clip-path', `url(#${clipPathId})`)
    //     .attr('pointer-events', 'none');
};


/**
 * https://github.com/Stalkcomrade/Vs/blob/master/src/components/d3Timeline/drawGen.js
 * @param axisXLane
 * @param xAxis
 * @param yScale
 * @param data
 * @param groups
 * @param g_h
 * @param symbolSize
 * @param intervalCornerRadius
 * @param currentTimeLineColor
 * @param currentTimeLineWidth
 * @param boundingLineColor
 * @param boundingLineWidth
 */
const drawGen = (
    axisXLane,
    xAxis,
    yScale,
    data,
    groups,
    g_h,
    symbolSize,
    intervalCornerRadius,
    currentTimeLineColor,
    currentTimeLineWidth,
    boundingLineColor,
    boundingLineWidth
) =&gt; {
    return (g, xScale) =&gt; {
        axisXLane
            .call(xAxis.scale(xScale))
            .selectAll('line')
            .attr('y1', -g_h)
            .attr('stroke', boundingLineColor)
            .attr('stroke-width', boundingLineWidth);

        g
            .call(drawEntriesMultiLaneX, data, groups, xScale, yScale, symbolSize, intervalCornerRadius, roundedRect)
        // .call(drawEntriesMultiLaneX, data, groups, xScale, yScale, symbolSize, intervalCornerRadius)
        
            .call(drawCurrentReferenceX, xScale, g_h, currentTimeLineColor, currentTimeLineWidth);
    }
};

vm.addToGlobalContext({
  drawEntriesMultiLaneX,
  drawCurrentReferenceX,
  drawGen
});
  
})</pre></div><div class="paragraph code-paragraph collapsed" data-id="T9XWjRQf" run-on-load="true" last-execution-state="success" name="brush"><pre data-type="content" type="text/javascript" id="brush">const vm = Codestrate.VirtualMachines.get("text/javascript");


importLib([
  "moment.min.js",
   "lodash.min.js",
   "d3.min.js"
]).then(() =&gt; {
  

/**
 *
 * @param extent
 * @param scale
 * @param data
 * @return {*[]}
 */
const brushInvertUn = (extent, scale, data, scaleY) =&gt; {
    if (isNull(d3.event.selection)) return;
    
// TODO: unite into one call?
//     debugger;
//     const [xLeft, xRight] = map
//         .call(d3.event.selection, el =&gt; el - extent[0][0]);
  
    console.log(data)
   const [yTop, yBottom] = map
        .call(d3.event.selection, el =&gt; el[1] - extent[0][1]);

  //console.log(imageScale.invert(xPos));
  // var eachBand = scaleY.step();
  // var index = Math.round((d3.event.y / eachBand));
  // var val = scaleY.domain()[index];
  
  // var imageScale = scaleY
  // var leftEdges = imageScale.range();
  // var width = imageScale.rangeBand();

    console.log(yTop)
    console.log(yBottom)
    
    var invertC = function(x){
        
      
      var eachBand = scaleY.step();
      console.log(scaleY.step())
      var index = Math.round(x / eachBand);
      console.log("index = ", index);
      var val = scaleY.domain()[index];
      console.log("val = ", val);
  
        return val

        // return ypos
        
      // var domain = scaleY.domain()
      // console.log("domain = ", domain);
      // var range = scaleY.range()
      // console.log("range = ", range);
      // var scale = d3.scaleQuantize().domain(range).range(domain)
      // console.log("scale = ", scale);

      // return scale(x)

    }

    // bisectCustom

    // var xpos = x

    console.log("band:", scaleY.bandwidth())
    
    // const bisecLeftC  = d3.bisector(d =&gt; scaleY(d) + scaleY.bandwidth()).left;
    const bisecLeftC  = d3.bisector(d =&gt; scaleY(d) + scaleY.bandwidth()).left;
    const bisecRightC = d3.bisector(d =&gt; scaleY(d) + scaleY.bandwidth()).right;
    
    var domain = scaleY.domain(),
        range = scaleY.range();

    // var ypos = domain[bisecLeftC(range, yTop, 0, domain.length - 1)];
    var ypos = domain[bisecLeftC(domain, yTop)];
    console.log("ypos = ", ypos);
    var ypos2 = domain[bisecRightC(domain, yBottom)]
    console.log("ypos2 = ", ypos2);

    
    // var ypos = domain[bisecLeftC(range, yTop)];
    // console.log("ypos = ", ypos);
    // var ypos2 = domain[bisecRightC(range, yBottom) - 1]
    // console.log("ypos2 = ", ypos2);
    
    
    // return {
    //     start: data[bisecLeft(data, yTop, 0, data.length - 1)].key,
    //     end: data[bisecRight(data, yBottom) - 1].key
    // };


 // console.log(invertC(yTop))
 //  console.log(invertC(yBottom))
  
  // TODO: unite into one call? 
//     if (isFunction(scale.invert)) return {
//         start: scale.invert(xLeft),
//         end: scale.invert(xRight)
//     };
  
  // console.log(scale.invert(yTop),scale.invert(yBottom))
  
    // if (isFunction(scale.invert)) return {
    //     start: scale.invert(yTop),
    //     end: scale.invert(yBottom)
    // };
  
  
   if (!isFunction(scale.bandwidth)) {
        const bisector  = d3.bisector(d =&gt; d.key);

       bisector.left(data.data, yTop)
       
        // return {
        //     start: data[bisector.left(data, yTop)].key,
        //     end: data[bisector.right(data, yBottom) - 1].key
        // };
    }
  
    const [[x0, y0], [x1, y1]] = d3.event.selection;
    // console.log(d3.event.selection)
   // value = data.filter(d =&gt; x0 &lt;= x(d.x) &amp;&amp; x(d.x) &lt; x1 &amp;&amp; y0 &lt;= y(d.y) &amp;&amp; y(d.y) &lt; y1);

    const bisecLeft  = d3.bisector(d =&gt; scale(d.key) + scale.bandwidth()).left;
    const bisecRight = d3.bisector(d =&gt; scale(d.key)).right;

    return {
        start: data[bisecLeft(data, yTop, 0, data.length - 1)].key,
        end: data[bisecRight(data, yBottom) - 1].key
    };
};


const brushUn = function(svg, extent, scale, { brushed, brushing }, data, scaleY) {
    const brushSelection = svg.select('.brush');
    let b = !brushSelection.empty()
        ? brushSelection
        : svg.append('g').attr('class', 'brush');

    const brush = d3.brush();
    const undefinedWrapper = (x, f, clean) =&gt; {
        if (x !== undefined) {
            f(x);
            if (clean) brush.move(b, null);
        }
    };


    brush
        .extent(extent);

    if (isFunction(brushed)) {
        brush.on('end', () =&gt; {
            undefinedWrapper(brushInvertUn(extent, scale, data, scaleY), brushed, true);
        });
    }

    if (isFunction(brushing)) {
        brush.on('brush', () =&gt; {
            undefinedWrapper(brushInvertUn(extent, scale, data, scaleY), brushing, false);
        });
    }

    b.call(brush);
}


/**
 *
 * @param extent
 * @param scale
 * @param data
 * @return {*[]}
 */
const brushInvertY = (extent, scale, data) =&gt; {
    if (isNull(d3.event.selection)) return;

    const [yTop, yBottom] = map
        .call(d3.event.selection, el =&gt; el - extent[0][1]);

    if (isFunction(scale.invert)) return {
        start: scale.invert(yTop),
        end: scale.invert(yBottom)
    };
  

    if (!isFunction(scale.bandwidth)) {
        const bisector  = d3.bisector(d =&gt; d.key);

        return {
            start: data[bisector.left(data, yTop)].key,
            end: data[bisector.right(data, yBottom) - 1].key
        };
    }

    const bisecLeft  = d3.bisector(d =&gt; scale(d.key) + scale.bandwidth()).left;
    const bisecRight = d3.bisector(d =&gt; scale(d.key)).right;

    return {
        start: data[bisecLeft(data, yTop, 0, data.length - 1)].key,
        end: data[bisecRight(data, yBottom) - 1].key
    };
};


/**
 *
 * @param extent
 * @param scale
 * @param data
 * @return {*[]}
 */
const brushInvertX = (extent, scale, data) =&gt; {
  
  console.log("Just data: ", data)
  
    if (isNull(d3.event.selection)) return;
    // debugger;
    const [xLeft, xRight] = map
        .call(d3.event.selection, el =&gt; el[1] - extent[0][0]);

   console.log("Scale Invert: ", scale.invert(xLeft))
  
    if (isFunction(scale.invert)) return {
        start: scale.invert(xLeft),
        end: scale.invert(xRight)
    };
  

    if (!isFunction(scale.bandwidth)) {
        const bisector = d3.bisector(d =&gt; d.key);

      // debugger;
      
      console.log("Bisector left first: ", data[bisector.left(data, xLeft)].key)
        return {
            start: data[bisector.left(data, xLeft)].key,
            end: data[bisector.right(data, xRight) - 1].key
        };
    }

    const bisecLeft  = d3.bisector(d =&gt; scale(d.key) + scale.bandwidth()).left;
    const bisecRight = d3.bisector(d =&gt; scale(d.key)).right;

  console.log("Bisector left first: ", data[bisecLeft(data, xLeft, 0, data.length - 1)].key)
  
    return {
        start: data[bisecLeft(data, xLeft, 0, data.length - 1)].key,
        end: data[bisecRight(data, xRight) - 1].key
    };
};


/**
 * https://github.com/Stalkcomrade/Vs/blob/master/src/plugins/brush.js
 * @param svg
 * @param extent
 * @param scale
 * @param data
 * @param brushed
 * @param brushing
 */
const brushX = function(svg, extent, scale, { brushed, brushing }, data) {
  // debugger;
    const brushSelection = svg.select('.brush');
    let b = !brushSelection.empty()
        ? brushSelection
        : svg.append('g').attr('class', 'brush');

    const brush = d3.brushX();
    const undefinedWrapper = (x, f, clean) =&gt; {
        if (x !== undefined) {
            f(x);
            if (clean) brush.move(b, null);
        }
    };


    brush
        .extent(extent);

    if (isFunction(brushed)) {
        brush.on('end', () =&gt; {
            undefinedWrapper(brushInvertX(extent, scale, data), brushed, true);
        });
    }

    if (isFunction(brushing)) {
        brush.on('brush', () =&gt; {
            undefinedWrapper(brushInvertX(extent, scale, data), brushing, false);
        });
    }

    b.call(brush);
}


/**
 *
 * @param svg
 * @param extent
 * @param scale
 * @param brushed
 * @param brushing
 * @param data
 */
const brushY = function(svg, extent, scale, { brushed, brushing }, data) {
    const brushSelection = svg.select('.brush');
    let b = !brushSelection.empty()
        ? brushSelection
        : svg.append('g').attr('class', 'brush');

    const brush = d3.brushY();
    const undefinedWrapper = (x, f, clean) =&gt; {
        if (x !== undefined) {
            f(x);
            if (clean) brush.move(b, null);
        }
    };


    brush
        .extent(extent);

    if (isFunction(brushed)) {
        brush.on('end', () =&gt; {
            undefinedWrapper(brushInvertY(extent, scale, data), brushed, true);
        });
    }

    if (isFunction(brushing)) {
        brush.on('brush', () =&gt; {
            undefinedWrapper(brushInvertY(extent, scale, data), brushing, false);
        });
    }

    b.call(brush);
}

vm.addToGlobalContext({
  brushInvertUn,
  brushUn,
  brushInvertY,
  brushInvertX,
  brushX,
  brushY
});
  
})</pre></div><div class="paragraph code-paragraph collapsed" data-id="XZWEtxcB" run-on-load="true" last-execution-state="success" name="zoom"><pre data-type="content" type="text/javascript" id="zoom">const vm = Codestrate.VirtualMachines.get("text/javascript");


importLib([
  "moment.min.js",
  "lodash.min.js",
  "d3.min.js"
]).then(() =&gt; {
  

/**
 * https://github.com/Stalkcomrade/Vs/blob/master/src/plugins/zoom.js
 * @param svg
 * @param zooming
 * @param zoomend
 * @param zoomstart
 * @param scaleExtent
 * @param extent
 */
const zoom = function (svg, { zooming, zoomend, zoomstart }, scaleExtent, extent) {
    const zoom = d3.zoom();

    if (isSimpleExtent(scaleExtent)) zoom.scaleExtent(scaleExtent);
    if (isExtent(extent)) svg.call(disableZoomOn, extent);

    if (isFunction(zooming))   zoom.on('zoom', zooming);
    if (isFunction(zoomend))   zoom.on('end', zoomend);
    if (isFunction(zoomstart)) zoom.on('start', zoomstart);

    svg.call(zoom);
    svg.on('dblclick.zoom', null);

    return zoom;
}

/**
 * https://github.com/Stalkcomrade/Vs/blob/master/src/plugins/disableZoomOn.js
 * @param svg
 * @param extent
 */
const disableZoomOn = (svg, extent) =&gt; {
    svg.on('mousedown', () =&gt; {
      console.log("DISABLED ZOOM")
        const [cx, cy] = d3.mouse(svg.node()),
            [[x0, y0], [x1, y1]] = extent;

        if (cx &lt; x0 || cx &gt; x1 || cy &gt; y1 || cy &lt; y0)
            d3.event.stopImmediatePropagation();
    });
};

vm.addToGlobalContext({
  zoom,
  disableZoomOn
});
  
})</pre></div><div class="paragraph code-paragraph" data-id="B9ubdjZB" run-on-load="true" last-execution-state="success" name="timeline-chart"><pre data-type="content" type="text/javascript" id="timeline-chart">const vm = Codestrate.VirtualMachines.get("text/javascript");

importLib([
    "moment.min.js",
    "lodash.min.js",
    "d3.min.js"
]).then(() =&gt; {

    class TimelineChart {
        
        constructor(options) {
            
            // this.selectPaddingInnerOuterY = selectPaddingInnerOuterY
            Object.assign(this, roundedRect)
            this.margin = {left: 100, top: 100, right: 50, bottom: 50}
            this.data = {
                scale: null,
                timer: null,
                zoom: null,
                w: null,
                svg: null,
                initScale: null
            }
            
            // create the chart
            // this.drawTimeline();
        }
        
        // testing whether class methods can assess outside of class space
        // SOLVED: they can
        testScopes() {
            return options.liveTimerTick
        };
        
        drawTimeline(dataObjectTimeline) {
            
            // dataObjectTimeline = ks
            
            Object.assign(this, options)
            this.axisXLabelLaneHeight = isNull(options.axisXLabel) ? 0 : 30
            
            
            // const { dateTimeStart, dateTimeEnd, data, groups } = getTimelineGroups(cloneDeep(this.data))
            const { dateTimeStart, dateTimeEnd, data, groups } = getTimelineGroups(cloneDeep(ks))
            
            // let inspect = [dateTimeStart, dateTimeEnd, data, groups]
            // inspect.push(data)
            // inspect.push(groups)
            
            const self = this
            
            const { left = 0, top = 0, right = 0, bottom = 0 } = this.margin,
                  // [w, h] = this.getElWidthHeight(),
                  [w, h] = [1000, 1000],
                  __offset__  = this.borderWidth,
                  g_w = w - left - right - this.groupLaneWidth - 2 * __offset__,
                  g_h = h - top - bottom - this.axisXLaneHeight - this.axisXLabelLaneHeight - 2 * __offset__,
                  entryClipPathId = uuid(), groupLabelClipPathId = uuid()
            self.w = g_w
            
            // this.w = g_w
            // TODO: figure out why is it used
            // if (![g_w, g_h].every(el =&gt; el &gt; 0) || !groups.length) return;
            
            
            const groupHeight = g_h / groups.length,
                  [paddingInner, paddingOuter] = selectPaddingInnerOuterY(groupHeight);
            
            const svg = d3.create("svg")
                  .attr('width', w)
                  .attr('height', h);
            
            self.svg = svg;
            
            const defs = svg
                  .append('defs');
            
            defs
                .append('clipPath')
                .attr('id', entryClipPathId)
                .append('path')
                .attr('d', () =&gt; roundedRect(0, 0, g_w, g_h + this.axisXLaneHeight, this.borderRadius - __offset__ / 2, false, true, false, true));
            defs
                .append('clipPath')
                .attr('id', groupLabelClipPathId)
                .append('path')
                .attr('d', () =&gt; roundedRect(0, 0, this.groupLaneWidth, g_h + this.axisXLaneHeight, this.borderRadius - __offset__ / 2, true, false, true, false));
            
            
            const xScale = d3.scaleTime()
                  .domain([dateTimeStart, dateTimeEnd])
                  .range([0, g_w]);
            
            self.scale = xScale;
            self.initScale = xScale.copy();
            
            this.scale = xScale;
            this.initScale = xScale.copy();
            
            
            const yScaleBrushing = d3.scaleBand()
                  .domain(groups)
                  .rangeRound([0, g_h])
            // .paddingInner(paddingInner)
            // .paddingOuter(paddingOuter);
            // console.log(paddingInner)
            // console.log(paddingOuter)
            // debugger;
            
            
            const yScale = (i) =&gt; d3.scaleBand()
                  .range([groupHeight * (i + 1), groupHeight * i])
                  .paddingInner(paddingInner)
                  .paddingOuter(paddingOuter);
            
            // INFO: for groups identification
            // self.scaleY = yScale;
            // this.initScale = xScale.copy();
            
            const xAxis = d3
                  .axisBottom(xScale)
                  .tickSize(this.tickSize)
                  .tickPadding(this.tickPadding);
            
            svg
                .append('path')
                .attr('d', () =&gt; roundedRect(left + __offset__ / 2, top + __offset__ / 2, g_w + self.groupLaneWidth + __offset__, g_h + this.axisXLaneHeight + __offset__, this.borderRadius, true, true, true, true))
                .attr('fill', this.backgroundColor)
                .attr('stroke', this.borderColor)
                .attr('stroke-width', this.borderWidth)
                .attr('pointer-events', 'none');
            
            svg
                .append('g')
                .attr('class', 'label--group')
                .attr('clip-path', `url(#${groupLabelClipPathId})`)
                .attr('transform', `translate(${left + __offset__}, ${top + __offset__})`)
                .selectAll('text')
                .data(groups)
                .enter()
                .append('text')
                .attr('x', () =&gt; this.groupLaneWidth / 2)
                .attr('y', (d, i) =&gt;  (2 * i + 1) * groupHeight / 2 )
                .attr('dy', '0.32em')
                .attr('text-anchor', 'middle')
                .attr('font-size', this.groupLabelFontSize)
                .attr('font-weight', this.groupLabelFontWeight)
                .attr('fill-opacity', this.groupLabelFontOpacity)
                .text(d =&gt; d)
                .attr('fill', '#000');
            
            svg
                .append('g')
                .attr('class', 'line--x')
                .attr('transform', `translate(${left + __offset__}, ${top + __offset__})`)
                .selectAll('line')
                .data(groups)
                .enter()
                .append('line')
                .attr('y1', (d, i) =&gt; (i + 1) * groupHeight)
                .attr('y2', (d, i) =&gt; (i + 1) * groupHeight)
                .attr('x2', () =&gt; g_w + this.groupLaneWidth)
                .attr('stroke', this.boundingLineColor)
                .attr('stroke-width', this.boundingLineWidth);
            
            svg
                .append('g')
                .attr('class', 'line--y')
                .attr('transform', () =&gt; `translate(${left + __offset__ + this.groupLaneWidth}, ${top + __offset__})`)
                .append('line')
                .attr('y2', g_h)
                .attr('stroke', this.boundingLineColor)
                .attr('stroke-width', this.boundingLineWidth);
            
            
            const axisXLane = svg
                  .append('g')
                  .attr('transform', () =&gt; `translate(${left + this.groupLaneWidth + __offset__}, ${top + g_h + __offset__})`)
                  .attr('class', 'axis axis--x')
                  .attr('font-size', this.axisFontSize)
                  .attr('font-weight', this.axisFontWeight)
                  .attr('fill-opacity', this.axisFontOpacity);
            
            
            const axisXLabelLane = svg
                  .append('g')
                  .attr('transform', `translate(${left + __offset__},${top + g_h + this.axisXLaneHeight + 2 * __offset__})`);
            
            
            axisXLabelLane
                .append('text')
                .attr('x', () =&gt;  (g_w + this.groupLaneWidth) / 2)
                .attr('y', this.axisXLabelLaneHeight / 2)
                .attr('fill', '#000')
                .attr('dy', '0.32em')
                .attr('text-anchor', 'middle')
                .text(this.axisXLabel)
                .attr('font-size', this.axisLabelFontSize)
                .attr('font-weight', this.axisLabelFontWeight)
                .attr('fill-opacity', this.axisLabelFontOpacity);
            
            const zoomExtent = [
                [left + __offset__ + this.groupLaneWidth, top + __offset__],
                [w - right - __offset__, h - __offset__ - this.axisXLabelLaneHeight]
            ];
            
            const brushExtent = [
                [left + __offset__ + this.groupLaneWidth, top + __offset__],
                [w - right - __offset__, h - this.axisXLaneHeight - __offset__ - this.axisXLabelLaneHeight]
            ];
            
            const drawFn = drawGen(
                axisXLane,
                xAxis,
                yScale,
                data,
                groups,
                g_h,
                this.symbolSize,
                this.intervalCornerRadius,
                this.currentTimeLineColor,
                this.currentTimeLineWidth,
                this.boundingLineColor,
                this.boundingLineWidth
            );
            
            
            // const brushed = ({ start, end }) =&gt; emit(this, 'range-updated', start, end);
            const brushed = ({ start, end }) =&gt; inspect.push({start, end});
            
            const zooming = () =&gt; {
                self.scale = d3.event.transform.rescaleX(xScale);
                self.scaleY = yScaleBrushing;
                svg.call(brushUn, brushExtent, self.scale, { brushed }, {data, groups}, self.scaleY);
                
                
                g.call(drawFn, self.scale);
            };
            const zoomend = () =&gt; {
                const start = self.scale.invert(0),
                      end = self.scale.invert(g_w);
                // self.$emit('range-updated', start, end);
            };
            
            
            self.zoom = zoom(svg, { zooming, zoomend }, this.scaleExtent, zoomExtent);
            
            
            const g = svg.append('g')
                  .attr('clip-path', `url(#${entryClipPathId})`)
                  .attr('transform', () =&gt; `translate(${left + __offset__ + this.groupLaneWidth}, ${top + __offset__})`);
            
            
            g.call(drawFn, self.scale);
            
            svg.attr("id", "timeline-svg")
            
            return svg

            // Observable style
            // return {svg: svg.node(), inspect: inspect}
            // document.getElementById("timeline").appendChild(svg.node())
            
        } 
        
    }

    vm.addToGlobalContext({
        TimelineChart
    });
    
})
</pre></div><div class="paragraph code-paragraph" data-id="Gdu58vgB" name="helper-functions"><pre data-type="content" type="text/javascript" id="helper-functions">const createTransientContainer = (paragraphId) =&gt; {

  // Vue.config.ignoredElements = ['transient'];
  // Create container and instantiate template.
  const containerElement = document.createElement('transient');
  containerElement.setAttribute('id', 'vue-container');
  
 	const appTemplate = document.createElement("div")
  appTemplate.setAttribute("id", "appTemplate")
  
  containerElement.appendChild(appTemplate.cloneNode(true));
  document.querySelector("#" + paragraphId).appendChild(containerElement);
  
  return containerElement
  
}

const eraseDom = (paragraphId) =&gt; {
  
	var myNode = document.getElementById(paragraphId);
	while (myNode.firstChild) {
  	  myNode.removeChild(myNode.firstChild)
  } 
}

exports = Object.assign(exports, {createTransientContainer, eraseDom})</pre></div><div class="paragraph code-paragraph" data-id="BpbYTF7M" last-execution-state="success" run-on-load="true" name="timeline-component-full"><pre data-type="content" type="text/javascript" id="timeline-component-full">exports.drawTimeline = (paragraph, dataObjectTimeline) =&gt; {
 
const utils = require("#helper-functions")  
utils.eraseDom("vue-timeline")

var containerElement = utils.createTransientContainer("vue-timeline")

var qk = new TimelineChart()
var timelineSvg = qk.drawTimeline(dataObjectTimeline)

containerElement.children[0].appendChild(timelineSvg.node())

}</pre></div><div class="paragraph body-paragraph" data-id="R9kqVipe" name="vue-timeline" transient-fullscreen="false"><div data-type="content" type="text/html" contenteditable="true" id="vue-timeline"></div></div><div class="paragraph code-paragraph" data-id="UTsi4PEA" name="sidebar-vis" last-execution-state="success" run-on-load="true"><pre data-type="content" type="text/javascript" id="sidebar-vis">// TODO: transient elements

const drawTimeline = require("#timeline-component-full");
const containerName = "sidebarVisContainer";

exports.getView = (id) =&gt; {
    
    // get container
    // get paragraph
    let container = document.getElementById(containerName);
    var comp = document.getElementsByName(id)[0].querySelector("transient[id='vue-container']")
    // var comp = dc.querySelector("div[data-type]")
    
    let w = 400;
    let h = 200;
    let div = document.createElement("div");
    div.classList.add("viewContainer");

    // if diff component is already attached to
    // sidebar, delete it
    container.querySelector("transient[id='vue-container']") &amp;&amp;
        container.querySelector("transient[id='vue-container']").remove()
    
    if (comp) {
        
        div.style.width = "400px";
        div.style.height = "200px";
        
        let ratio = comp.offsetWidth / comp.offsetHeight;
        
        if (ratio &gt; 0.5) {
            
            div.classList.add("height-preferred");
            
        }
        
        container.appendChild(comp)
        
        return {w: w, h: h, content: div, view: comp};
        
    } else {
        
        let div = document.createElement("div");
        div.style.width = 180 + "px";
        div.style.height = h + "px";
        div.innerHTML = "No view";
        
        return {w: 180, h: 50, content: div};
        
    }
};



exports.showPipeline = () =&gt; {
  
  let container = document.getElementById(containerName);
  
  // console.log(container)
  
  if (!container) {
    
    container = document.createElement("transient");
    container.setAttribute("id", containerName);
    document.body.appendChild(container);
  }
  
  
  document.body.setAttribute("transient-sidebar", true);
  
};

exports.hidePipeline = () =&gt; {
  
  let container = document.getElementById(containerName); 
  document.body.setAttribute("transient-sidebar", false);
  
};



exports.timelineMode = (paragraph) =&gt; {
  
  var state = paragraph.getElementsByClassName("toggle-timeline")[0]
  
  if (!state.classList.contains("timeline-active")) {
      
      // TODO: fixme get paragraph ID
    	// updates ui
   		 
    	state.classList.add("timeline-active")
    
    // FIXME: work on accessing the timeline data properly
    // currently, working via global scope vm.context.timelineFinalDataObject
    
      drawTimeline.drawTimeline(paragraph, vm.context.timelineFinalDataObject)  
      exports.showPipeline()
      exports.getView("vue-timeline")
      
      } else {
        
        	state.classList.remove("timeline-active")
          exports.hidePipeline()
  	      
      }
  
}
</pre></div><div class="paragraph code-paragraph" data-id="ZPuGX6Uc" name="vis-components-ui" run-on-load="true" last-execution-state="success"><pre data-type="content" type="text/javascript" id="vis-components-ui">const sidebarVis = require("#sidebar-vis")


importLib([
    "hammer.min.js",
    "hammer-time.min.js"
]).then(() =&gt; {

  const ParagraphUtils = require("#paragraph-utils");

  let addTimelineButton = (paragraph) =&gt; {

	let header = ParagraphUtils.getHeaderElement(paragraph);

	// Make sure to add action only once, e.g. triggered multiple times on paragraph drag and drop
	if (header.querySelector(".toggle-timeline")) {
	    return;
	}

	let toggleTimeline = document.createElement("div");
	toggleTimeline.classList.add("action");
	toggleTimeline.classList.add("toggle-timeline");
	toggleTimeline.setAttribute("tooltip", "true");
	
	let iconTimeline = document.createElement("i");
	iconTimeline.classList.add("material-icons");
	toggleTimeline.appendChild(iconTimeline);
	header.appendChild(toggleTimeline);

 
     try {
       
        [{action: toggleTimeline, desc: "toggleTimeline"}].forEach(action =&gt; {

             
       var mc = new Hammer.Manager(action.action);
             
	     mc.add(new Hammer.Tap({
	         event: "tap",
	         taps: 1
	     }));

	     mc.add(new Hammer.Press({
	         event: "longpress",
	         time: 250
	     }));
             
             mc.on("tap", () =&gt; {
          	     sidebarVis.timelineMode(paragraph);                 
	         });
               
         })
       
     } catch {
       console.log("Error!");
     }
    };

    document.liveQuerySelectorAll(".paragraph").added(paragraph =&gt; {

        // only code paragraphs
        if (!paragraph.querySelector("pre[data-type='content']")) return;

        const header = ParagraphUtils.getHeaderElement(paragraph);
        const content = ParagraphUtils.getContentElement(paragraph);

        addTimelineButton(paragraph)
    });


});
</pre></div><div class="paragraph style-paragraph collapsed" data-id="hHibAaNG" name="d3-timeline"><style data-type="content" type="text/css" id="d3-timeline">.d3-timeline path {
        cursor: pointer;
    }
    .d3-timeline .axis.axis--x .domain {
        display: none;
    }
    .d3-timeline text {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        cursor: pointer;
    }
    .d3-timeline .entry--interval--default {
        fill:#896bda;
        stroke: #896bda;
        stroke-opacity: 1;
        cursor: pointer;
    }
    .d3-timeline .entry--point--default {
        fill:#896bda;
        stroke: #896bda;
        stroke-opacity: 1;
        cursor: pointer;
    }
    .d3-timeline .entry--interval--error {
        fill: #ff3860;;
        stroke: #ff3860;
        stroke-opacity: 1;
        cursor: pointer;
    }
    .d3-timeline .entry--point--error {
        fill: #ff3860;;
        stroke: #ff3860;
        stroke-opacity: 1; 
        cursor: pointer;
    }
    .d3-timeline .entry--interval--success {
        fill: #23d160;;
        stroke: #23d160;
        stroke-opacity: 1;
        cursor: pointer;
    }
    .d3-timeline .entry--point--success {
        fill: #23d160;;
        stroke: #23d160;
        stroke-opacity: 1;
        cursor: pointer;
    }
    .d3-timeline .entry--interval--info {
        fill: #167df0;;
        stroke: #167df0;
        stroke-opacity: 1;
        cursor: pointer;
    }
    .d3-timeline .entry--point--info {
        fill: #167df0;;
        stroke: #167df0;
        stroke-opacity: 1;
        cursor: pointer;
    }
    .d3-timeline .entry--interval--warn {
        fill: #ffdd57;;
        stroke: #ffdd57;
        stroke-opacity: 1;
        cursor: pointer;
    }
    .d3-timeline .entry--point--warn {
        fill: #ffdd57;;
        stroke: #ffdd57;
        stroke-opacity: 1;
        cursor: pointer;
    }</style></div><div class="paragraph style-paragraph collapsed" data-id="PtP4e7yu" name="vis-components-sidebar-style"><style data-type="content" type="text/css" id="vis-components-sidebar-style">body[transient-sidebar] #sidebarVisContainer {
	position: fixed;
	right: 0%;
	top: 65%;
  bottom: 0%;
  width: 100%;
  height: 50%;
  z-index: 1300;
	background-color: var(--color-primary-shade-2);
  transform: translate3d(100%, 0, 0);
  box-shadow: none;
  transition: transform var(--navigation-transition), box-shadow var(--navigation-transition);
}

body[transient-sidebar="true"] #sidebarVisContainer {
  transform: translate3d(0, 0, 0);
  box-shadow: 0 0 10px gray;
}

#timeline-svg {
	width: 50 !important;
	height: 100 !important;
}

svg foreignObject > .viewContainer {
	display: flex;
/* 	position: static; */
/* 	overflow: auto; */
	overflow: hidden;
}

svg foreignObject > .viewContainer .visview {
/* 	overflow: scroll; */
/* 	display: flex; */
/* 	width: 100%; */
/* 	height: 100%; */
}
</style></div><div class="paragraph style-paragraph collapsed" data-id="usFFzU59" name="vis-components-ui-style"><style data-type="content" type="text/css" id="vis-components-ui-style">html .paragraph .toggle-timeline {
    margin-left: 5px;
    margin-right: 10px;
}

html .paragraph .toggle-timeline i:after {
	content: "insert_chart_outlined";
}

.timeline-active i:after {
	color: blue;
}</style></div></div>