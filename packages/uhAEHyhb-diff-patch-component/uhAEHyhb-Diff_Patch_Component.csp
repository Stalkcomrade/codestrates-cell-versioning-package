<div class="section" data-id="uhAEHyhb" data-type="package" name="Diff Patch Component"><div class="paragraph body-paragraph" name="Documentation" data-id="BHwGfKAW"><div data-type="content" type="text/html" contenteditable="true" class="section-documentation"><h2>Description</h2>
<div>Your description...</div></div></div><div class="paragraph data-paragraph" name="Properties" data-id="NHLvqkv9"><pre data-type="content" type="application/json" class="section-properties">{
  "version": "0.2.0",
  "icon": "inbox",
  "description": "provides version control patches for code cells",
  "tags": [
    "pathing",
    "version control"
  ],
  "assets": [
    "diff.min.js",
    "diff2html.min.js",
    "diff2html.min.css"
  ],
  "changelog": {
    "0.2.0": "added simple interface for a code cell.",
    "0.1.5": "added sidebar ala in a Vistrate.",
    "0.1"  : "Initial version."
  },
  "github": {
    "url"   : "https://github.com/Stalkcomrade/codestrates-cell-versioning-package",
		"folder": "packages/uhAEHyhb-diff-patch-component"
  }
}</pre></div><div class="paragraph code-paragraph" data-id="eJGyMEpa" name="path-beautify"><pre data-type="content" type="text/javascript" id="path-beautify">exports.patchBeautify = (paragraphId, chunkName, initial, latest) =&gt; {

importLib([
    "diff2html.min.js",
    "diff.min.js"
]).then(() =&gt; {
  

var preDiffLocal = [initial, latest];
var ndDiff = Diff.createPatch(chunkName, preDiffLocal[0], preDiffLocal[1])
  
var diffHtml = Diff2Html.getPrettyHtml(
                        ndDiff, {
                        inputFormat: 'diff',
                        showFiles: false,
                        matching: 'lines',
                        outputFormat: 'side-by-side'
                }
         )

// debugger
// currently, this should work only for one code paragraph
var paragraphId = "patch-display"


if (document.getElementsByName(paragraphId)[0].querySelector("#diff-container")) {
  
  document.getElementsByName(paragraphId)[0].querySelector("#diff-container").remove()
  
}
  

const transientContainer = document.createElement("transient")
transientContainer.setAttribute("id", "diff-container")  
transientContainer.insertAdjacentHTML('beforeend', diffHtml)

document.getElementsByName(paragraphId)[0].querySelector("[data-type='content']").appendChild(transientContainer)

 

  
  })
  
}
</pre></div><div class="paragraph code-paragraph" data-id="sEgKnQn5" name="sidebar-diff"><pre data-type="content" type="text/javascript" id="sidebar-diff">// TODO: transient elements

const patch = require("#path-beautify")

// get output

exports.getView = (id) =&gt; {
    
    // get container
    // get paragraph
    let container = document.getElementById("sidebarDiffContainer");
    var comp = document.getElementsByName(id)[0].querySelector("transient[id='diff-container']")
    // var comp = dc.querySelector("div[data-type]")
    
    let w = 400;
    let h = 200;
    let div = document.createElement("div");
    div.classList.add("viewContainer");

    // if diff component is already attached to
    // sidebar, delete it
    container.querySelector("transient[id='diff-container']") &amp;&amp;
        container.querySelector("transient[id='diff-container']").remove()
    
    if (comp) {
        
        div.style.width = "400px";
        div.style.height = "200px";
        
        let ratio = comp.offsetWidth / comp.offsetHeight;
        
        if (ratio &gt; 0.5) {
            
            div.classList.add("height-preferred");
            
        }
        
        container.appendChild(comp)
        
        return {w: w, h: h, content: div, view: comp};
        
    } else {
        
        let div = document.createElement("div");
        div.style.width = 180 + "px";
        div.style.height = h + "px";
        div.innerHTML = "No view";
        
        return {w: 180, h: 50, content: div};
        
    }
};



exports.showPipeline = () =&gt; {
  
  let container = document.getElementById("sidebarDiffContainer");
  
  // console.log(container)
  
  if (!container) {
    
    container = document.createElement("transient");
    container.setAttribute("id", "sidebarDiffContainer");
    document.body.appendChild(container);
  }
  
  
  document.body.setAttribute("transient-sidebar", true);
  
};

exports.hidePipeline = () =&gt; {
  
  let container = document.getElementById("sidebarDiffContainer"); 
  document.body.setAttribute("transient-sidebar", false);
  
};



exports.diffMode = (paragraph) =&gt; {
  
  var state = paragraph.getElementsByClassName("toggle-diff")[0]
  
  if (!state.classList.contains("diff-active")) {
      
      // TODO: fixme get paragraph ID
    
      patch.patchBeautify(paragraph, "test", "1111", "2222")
      state.classList.add("diff-active")
      exports.showPipeline()
      exports.getView("patch-display")
      
      
      } else {
        
          state.classList.remove("diff-active")
          exports.hidePipeline()
  	      
      }
  
}
</pre></div><div class="paragraph code-paragraph" data-id="8ZDQnYba" name="diff-ui" last-execution-state="success" run-on-load="true"><pre data-type="content" type="text/javascript" id="diff-ui">const diffUtils = require("#sidebar-diff");

importLib([
    "hammer.min.js",
    "hammer-time.min.js"
]).then(() =&gt; {

    const ParagraphUtils = require("#paragraph-utils");

  let addDiffButton = (paragraph) =&gt; {

	let header = ParagraphUtils.getHeaderElement(paragraph);

	// Make sure to add action only once, e.g. triggered multiple times on paragraph drag and drop
	if (header.querySelector(".toggle-diff")) {
	    return;
	}

	let toggleDiff = document.createElement("div");
	toggleDiff.classList.add("action");
	toggleDiff.classList.add("toggle-diff");
	toggleDiff.setAttribute("tooltip", "true");
	
	let iconDiff = document.createElement("i");
	iconDiff.classList.add("material-icons");
	toggleDiff.appendChild(iconDiff);
	header.appendChild(toggleDiff);

 
     try {
       
        [{action: toggleDiff, desc: "toggleDiff"}].forEach(action =&gt; {

             
       var mc = new Hammer.Manager(action.action);
             
	     mc.add(new Hammer.Tap({
	         event: "tap",
	         taps: 1
	     }));

	     mc.add(new Hammer.Press({
	         event: "longpress",
	         time: 250
	     }));
             
             mc.on("tap", () =&gt; {
          	     diffUtils.diffMode(paragraph);                 
	         });
               
         })
       
     } catch {
       console.log("Error!");
     }
    };

    document.liveQuerySelectorAll(".paragraph").added(paragraph =&gt; {

        // only code paragraphs
        if (!paragraph.querySelector("pre[data-type='content']")) return;

        const header = ParagraphUtils.getHeaderElement(paragraph);
        const content = ParagraphUtils.getContentElement(paragraph);

        addDiffButton(paragraph)
    });


});
</pre></div><div class="paragraph style-paragraph" data-id="BNfusWfe" name="diff-ui-style"><style data-type="content" type="text/css" id="diff-ui-style">html .paragraph .toggle-diff {
    margin-left: 5px;
    margin-right: 10px;
}

html .paragraph .toggle-diff i:after {
	content: "inbox";
}

.diff-active i:after {
	color: blue;
}</style></div><div class="paragraph code-paragraph collapsed" data-id="6GZnnADH" last-execution-state="success" name="patch-apply"><pre data-type="content" type="text/javascript" id="patch-apply">exports.createPatch = (paragraphId) =&gt; {
  
  importLib([
    "diff.min.js"
]).then(() =&gt; {
  
var one = 'beep boop',
    other = 'beep boob blah',
    color = '',
    span = null;

var diff = Diff.diffChars(one, other),
    display = document.getElementById(paragraphId),
    fragment = document.createDocumentFragment();

diff.forEach(function(part){
  // green for additions, red for deletions
  // grey for common parts
  color = part.added ? 'green' :
    part.removed ? 'red' : 'grey';
  span = document.createElement('span');
  span.style.color = color;
  span.appendChild(document
    .createTextNode(part.value));
  fragment.appendChild(span);
});

display.appendChild(fragment);
  
})
  
}
</pre></div><div class="paragraph body-paragraph" data-id="Tnba8rNX" name="patch-display"><div data-type="content" type="text/html" contenteditable="true" id="patch-display"></div></div><div class="paragraph style-paragraph collapsed" data-id="BHQnnywh" name="sidebar-diff-style"><style data-type="content" type="text/css" id="sidebar-diff-style">body[transient-sidebar] #sidebarDiffContainer {
	position: fixed;
	right: 0%;
	top: 0%;
  width: 27%;
  height: 100%;
  z-index: 1300;
	background-color: var(--color-primary-shade-2);
  transform: translate3d(100%, 0, 0);
  box-shadow: none;
  transition: transform var(--navigation-transition), box-shadow var(--navigation-transition);
}

body[transient-sidebar="true"] #sidebarDiffContainer {
  transform: translate3d(0, 0, 0);
  box-shadow: 0 0 10px gray;
}

body[transient-sidebar="true"] #sidebarDiffContainer > .visview > svg {
	width: 100% !important;
	height: 100% !important;
}

svg foreignObject > .viewContainer {
	display: flex;
/* 	position: static; */
/* 	overflow: auto; */
	overflow: hidden;
}

svg foreignObject > .viewContainer .visview {
/* 	overflow: scroll; */
/* 	display: flex; */
/* 	width: 100%; */
/* 	height: 100%; */
}
</style></div><div class="paragraph style-paragraph collapsed" data-id="tcPbcPhE" name="diff2html"><style data-type="content" type="text/css" id="diff2html">.d2h-wrapper {
	text-align: left
}

.d2h-file-header {
	height: 35px;
	padding: 5px 10px;
	border-bottom: 1px solid #d8d8d8;
	background-color: #f7f7f7
}

.d2h-file-stats {
	display: flex;
	margin-left: auto;
	font-size: 14px
}

.d2h-lines-added {
	text-align: right;
	border: 1px solid #b4e2b4;
	border-radius: 5px 0 0 5px;
	color: #399839;
	padding: 2px;
	vertical-align: middle
}

.d2h-lines-deleted {
	text-align: left;
	border: 1px solid #e9aeae;
	border-radius: 0 5px 5px 0;
	color: #c33;
	padding: 2px;
	vertical-align: middle;
	margin-left: 1px
}

.d2h-file-name-wrapper {
	display: flex;
	align-items: center;
	width: 100%;
	font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Arial, sans-serif;
	font-size: 15px
}

.d2h-file-name {
	white-space: nowrap;
	text-overflow: ellipsis;
	overflow-x: hidden
}

.d2h-file-wrapper {
	border: 1px solid #ddd;
	border-radius: 3px;
	margin-bottom: 1em
}

.d2h-diff-table {
	width: 100%;
	border-collapse: collapse;
	font-family: Menlo, Consolas, monospace;
	font-size: 13px
}

.d2h-diff-tbody>tr>td {
	height: 20px;
	line-height: 1
}

.d2h-files-diff {
	display: block;
	width: 100%;
	height: 100%
}

.d2h-file-diff {
	overflow-x: scroll;
	overflow-y: hidden
}

.d2h-file-side-diff {
	display: inline-block;
	overflow-x: scroll;
	overflow-y: hidden;
	width: 50%;
	margin-right: -4px;
	margin-bottom: -8px
}

.d2h-code-line {
	display: inline-block;
	white-space: nowrap;
	padding: 0 10px
}

.d2h-code-side-line {
	display: inline-block;
	white-space: nowrap;
	padding: 0 10px
}

.d2h-code-line del,
.d2h-code-side-line del {
	display: inline-block;
	margin-top: -1px;
	text-decoration: none;
	background-color: #ffb6ba;
	border-radius: .2em
}

.d2h-code-line ins,
.d2h-code-side-line ins {
	display: inline-block;
	margin-top: -1px;
	text-decoration: none;
	background-color: #97f295;
	border-radius: .2em;
	text-align: left
}

.d2h-code-line-prefix {
	display: inline;
	background: 0 0;
	padding: 0;
	word-wrap: normal;
	white-space: pre
}

.d2h-code-line-ctn {
	display: inline;
	background: 0 0;
	padding: 0;
	word-wrap: normal;
	white-space: pre
}

.line-num1 {
	box-sizing: border-box;
	float: left;
	width: 40px;
	overflow: hidden;
	text-overflow: ellipsis;
	padding-left: 3px
}

.line-num2 {
	box-sizing: border-box;
	float: right;
	width: 40px;
	overflow: hidden;
	text-overflow: ellipsis;
	padding-left: 3px
}

.d2h-code-linenumber {
	box-sizing: border-box;
	width: 86px;
	padding-left: 2px;
	padding-right: 2px;
	background-color: #fff;
	color: rgba(0, 0, 0, .3);
	text-align: right;
	border: solid #eee;
	border-width: 0 1px 0 1px;
	cursor: pointer
}

.d2h-code-side-linenumber {
	box-sizing: border-box;
	width: 56px;
	padding-left: 5px;
	padding-right: 5px;
	background-color: #fff;
	color: rgba(0, 0, 0, .3);
	text-align: right;
	border: solid #eee;
	border-width: 0 1px 0 1px;
	cursor: pointer;
	overflow: hidden;
	text-overflow: ellipsis
}

.d2h-code-side-emptyplaceholder,
.d2h-emptyplaceholder {
	background-color: #f1f1f1;
	border-color: #e1e1e1
}

.d2h-del {
	background-color: #fee8e9;
	border-color: #e9aeae
}

.d2h-ins {
	background-color: #dfd;
	border-color: #b4e2b4
}

.d2h-info {
	background-color: #f8fafd;
	color: rgba(0, 0, 0, .3);
	border-color: #d5e4f2
}

.d2h-file-diff .d2h-del.d2h-change {
	background-color: #fdf2d0
}

.d2h-file-diff .d2h-ins.d2h-change {
	background-color: #ded
}

.d2h-file-list-wrapper {
	margin-bottom: 10px
}

.d2h-file-list-wrapper a {
	text-decoration: none;
	color: #3572b0
}

.d2h-file-list-wrapper a:visited {
	color: #3572b0
}

.d2h-file-list-header {
	text-align: left
}

.d2h-file-list-title {
	font-weight: 700
}

.d2h-file-list-line {
	display: flex;
	text-align: left
}

.d2h-file-list {
	display: block;
	list-style: none;
	padding: 0;
	margin: 0
}

.d2h-file-list>li {
	border-bottom: #ddd solid 1px;
	padding: 5px 10px;
	margin: 0
}

.d2h-file-list>li:last-child {
	border-bottom: none
}

.d2h-file-switch {
	display: none;
	font-size: 10px;
	cursor: pointer
}

.d2h-icon {
	vertical-align: middle;
	margin-right: 10px;
	fill: currentColor
}

.d2h-deleted {
	color: #c33
}

.d2h-added {
	color: #399839
}

.d2h-changed {
	color: #d0b44c
}

.d2h-moved {
	color: #3572b0
}

.d2h-tag {
	display: flex;
	font-size: 10px;
	margin-left: 5px;
	padding: 0 2px;
	background-color: #fff
}

.d2h-deleted-tag {
	border: #c33 1px solid
}

.d2h-added-tag {
	border: #399839 1px solid
}

.d2h-changed-tag {
	border: #d0b44c 1px solid
}

.d2h-moved-tag {
	border: #3572b0 1px solid
}

.selecting-left .d2h-code-line,
.selecting-left .d2h-code-line *,
.selecting-left .d2h-code-side-line,
.selecting-left .d2h-code-side-line *,
.selecting-right td.d2h-code-linenumber,
.selecting-right td.d2h-code-linenumber *,
.selecting-right td.d2h-code-side-linenumber,
.selecting-right td.d2h-code-side-linenumber * {
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none
}

.selecting-left .d2h-code-line ::-moz-selection,
.selecting-left .d2h-code-line::-moz-selection,
.selecting-left .d2h-code-side-line ::-moz-selection,
.selecting-left .d2h-code-side-line::-moz-selection,
.selecting-right td.d2h-code-linenumber::-moz-selection,
.selecting-right td.d2h-code-side-linenumber ::-moz-selection,
.selecting-right td.d2h-code-side-linenumber::-moz-selection {
	background: 0 0
}

.selecting-left .d2h-code-line ::selection,
.selecting-left .d2h-code-line::selection,
.selecting-left .d2h-code-side-line ::selection,
.selecting-left .d2h-code-side-line::selection,
.selecting-right td.d2h-code-linenumber::selection,
.selecting-right td.d2h-code-side-linenumber ::selection,
.selecting-right td.d2h-code-side-linenumber::selection {
	background: 0 0
}</style></div></div>