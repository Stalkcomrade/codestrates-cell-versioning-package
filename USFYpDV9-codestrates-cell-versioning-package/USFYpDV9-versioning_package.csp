<div class="section section-visible" data-id="USFYpDV9" name="versioning package" data-type="package" transient-focussed="true"><div class="paragraph body-paragraph" data-id="CiC6ZNKJ" name="Documentation"><div data-type="content" type="text/html" contenteditable="true" class="section-properties"></div></div><div class="paragraph data-paragraph" data-id="NKRfAA7M" name="Properties"><pre data-type="content" type="application/json">{
	"version": "0.1",
	"icon": "bubble_chart",
	"description": "a wrapper for core Webstrates api to enable local versioning for code chunks in Codestrates.",
	"tags": [
		"function",
		"code paragraphs"
	],
	"assets": [
	],
	"dependencies": [
	],
	"changelog":
	{
		"0.1": "Initial version."
	},
	"github": {
		"url": "https://github.com/Stalkcomrade/codestrates-cell-versioning-package",
		"folder": "USFYpDV9-codestrates-cell-versioning-package"
	}
}</pre></div><div class="paragraph code-paragraph" data-id="3widdW9p" name="Versioning Utils" last-execution-state="success"><pre data-type="content" type="text/javascript" id="versioning-utils">const toggleVersioningFrame = () =&gt; {
    console.log("Works");
};

exports.toggleVersioningFrame = toggleVersioningFrame;</pre></div><div class="paragraph code-paragraph" data-id="Cqhpj3an" name="Versioning UI" last-execution-state="success"><pre data-type="content" type="text/javascript" id="versioning-ui">const VersioningUtils = require("#versioning-utils")

importLib([
    "hammer.min.js",
    "hammer-time.min.js"
]).then(() =&gt; {

    const ParagraphUtils = require("#paragraph-utils");

    // paragraph -&gt; parent
    // -&gt; second child === pre

    let addVersioningButton = (paragraph) =&gt; {

	let header = ParagraphUtils.getHeaderElement(paragraph);

	// Make sure to add action only once, e.g. triggered multiple times on paragraph drag and drop
	if (header.querySelector(".action.toggle-versioning")) {
	    return;
	}

	let action = document.createElement("div");
	action.classList.add("action");
	action.classList.add("toggle-versioning");
	action.setAttribute("tooltip", "true");
	
	let icon = document.createElement("i");
	icon.classList.add("material-icons");
	action.appendChild(icon);
	header.appendChild(action);
        
	var mc = new Hammer.Manager(action);
	mc.add(new Hammer.Tap({
	    event: "tap",
	    taps: 1
	}));

	mc.add(new Hammer.Press({
	    event: "longpress",
	    time: 250
	}));

        // TODO:
	mc.on("tap", () =&gt; {
	    VersioningUtils.toggleVersioningFrame(paragraph);
	});
        
	// mc.on("longpress", (event) =&gt; {
	//     FullscreenUtils.togglePersistedFullscreen(paragraph);
	// });
    };

    // TODO:
    document.liveQuerySelectorAll(".paragraph").added(addVersioningButton);
});

/******************************************************************************/

// Exit fullscreen when transient fullscreen paragraph was deleted
// const selector = document.liveQuerySelectorAll('.paragraph.fullscreen');
// selector.removed(FullscreenUtils.exitFullscreen);

/******************************************************************/

codestrate.addCommand("codestrates.cellVersioning", "Cell Versioning", (event) =&gt; {
    let paragraph;
	if (event !== null &amp;&amp; event.target !== null) {
	    let target = event.target;
	    // paragraph = target.closest(".paragraph");
            paragraph = target.closest(".paragraph");
	} else {
	    // paragraph = codestrate.focussedParagraph;
	}
	// if (!paragraph) {
	// 	paragraph = document.querySelector(".paragraph.fullscreen:not([transient-fullscreen='false']),.paragraph[transient-fullscreen='true']");
	// }

	if (paragraph) {
		// FullscreenUtils.togglePersistedFullscreen(paragraph);
	}
});

codestrate.addKeyBinding("codestrates.cellVersioning", "ctrl+shift+v", true);
</pre></div><div class="paragraph style-paragraph" data-id="wHtYFUqf" name="Versioning Indicator"><style data-type="content" type="text/css">#cellVersioning-indicator {
	position: fixed;
	right: 0;
	top: 100px;
	width: 30px;
	height: 400px;
	cursor: pointer;

	color:  rgba(255, 255, 255, 0.2);
	background: rgba(0, 0, 0, 0.2);
	border-radius: 2px;
	z-index: 201;
}

#cellVersioning-indicator:hover {
	color: inherit;
	background: rgba(0, 0, 0, 0.3);
}

#cellVersioning-indicator:before {
	padding-left: 7px;
	padding-bottom: 7px;
	content: attr(icon);
	position: relative;
	display: inline-block;
	transform: rotate(90deg) translate3d(0, -100%, 0);
	transform-origin: 0 0 0;

	font-family: "Material Icons";
	font-weight: normal;
	font-style: normal;
	/* font-size: 24px; */
	display: inline-block;
	line-height: 1;
	text-transform: none;
	letter-spacing: normal;
	word-wrap: normal;
	white-space: nowrap;
	direction: ltr;
	-webkit-font-smoothing: antialiased;
	text-rendering: optimizeLegibility;
	-moz-osx-font-smoothing: grayscale;
	font-feature-settings: "liga";
}

#cellVersioning-indicator:after {
	padding: 5px;
	padding-left: 10px;
	content: attr(name);
	display: inline-block;
	width: 200px;
	position: relative;
	transform: rotate(90deg) translate3d(0, -100%, 0);
	transform-origin: 0 0 0;
}

#cellVersioning-indicator:not([name]):after {
	content: "No Name";
}

#cellVersioning-indicator.hidden {
	display: none;
}</style></div></div>